import pytest
import time
from pages.login_page import LoginPage

@pytest.mark.login
class TestParameterizedLogin:
    """–¢–µ—Å—Ç—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∞—Ü–∏–µ–π"""

@pytest.mark.parametrize("username, password, expected_result", [
    ("standard_user", "secret_sauce", "success"),
    ("locked_out_user", "secret_sauce", "error"),
    ("problem_user", "secret_sauce", "success")
])
def test_login_with_different_users(driver, username, password, expected_result):
    """–¢–µ—Å—Ç –ª–æ–≥–∏–Ω–∞ —Ä–∞–∑–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    print(f"  > –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")

    login_page = LoginPage(driver)
    login_page.open()
    login_page.login(username, password)

    if expected_result == "success":
        assert "/inventory.html" in driver.current_url
        print(f"  ! –£—Å–ø–µ—à–Ω—ã–π –ª–æ–≥–∏–Ω: {username}")
    else:
        assert login_page.is_error_message_displayed()
        error_text = login_page.get_error_message()
        print(f"  ! –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: {error_text}")

    time.sleep(1)
@pytest.mark.parametrize("username, password, expected_error", [
    ("invalid_user", "wrong_password", "Username and password do not match"),
    ("", "secret_sauce", "Username is required"),
    ("standard_user", "", "Password is required")
])
def test_invalid_credentials(driver, username, password, expected_error):
    """–¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö credentials"""
    print(f"üî¥ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: '{username}' / '{password}'")
    login_page = LoginPage(driver)
    login_page.open()
    login_page.login(username, password)
    assert login_page.is_error_message_displayed()
    error_text = login_page.get_error_message()
    assert expected_error in error_text
    print(f"üî¥ –ü–æ–ª—É—á–µ–Ω–∞ –æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞: {error_text}")
    time.sleep(1)