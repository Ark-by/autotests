#!/usr/bin/env python3
"""
üõ†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞ –∞–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import os
import sys
import subprocess
import platform
from pathlib import Path

def print_colored(text, color_code):
    """–í—ã–≤–æ–¥ —Ü–≤–µ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    if platform.system() != "Windows":
        print(f"\033[{color_code}m{text}\033[0m")
    else:
        print(text)

def check_python():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ Python"""
    try:
        version = sys.version_info
        print_colored(f"üêç Python –≤–µ—Ä—Å–∏—è: {version.major}.{version.minor}.{version.micro}", "32")
        return True
    except Exception as e:
        print_colored("‚ùå Python –Ω–µ –Ω–∞–π–¥–µ–Ω!", "31")
        return False

def create_venv():
    """–°–æ–∑–¥–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ"""
    venv_path = Path("venv")
    
    if venv_path.exists():
        print_colored("üìÅ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", "33")
        return True
    
    print_colored("üîß –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...", "36")
    try:
        subprocess.run([sys.executable, "-m", "venv", "venv"], check=True)
        print_colored("‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ", "32")
        return True
    except subprocess.CalledProcessError as e:
        print_colored(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ venv: {e}", "31")
        return False

def get_venv_python():
    """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ Python –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏"""
    if platform.system() == "Windows":
        return Path("venv/Scripts/python.exe")
    else:
        return Path("venv/bin/python")

def install_requirements():
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    venv_python = get_venv_python()
    
    if not venv_python.exists():
        print_colored("‚ùå Python –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω", "31")
        return False
    
    print_colored("üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip...", "36")
    try:
        subprocess.run([str(venv_python), "-m", "pip", "install", "--upgrade", "pip"], check=True)
    except subprocess.CalledProcessError:
        print_colored("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å pip, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...", "33")
    
    print_colored("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...", "36")
    try:
        subprocess.run([str(venv_python), "-m", "pip", "install", "-r", "requirements.txt"], check=True)
        print_colored("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã", "32")
        return True
    except subprocess.CalledProcessError as e:
        print_colored(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}", "31")
        return False

def run_tests():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã"""
    venv_python = get_venv_python()
    
    if not venv_python.exists():
        print_colored("‚ùå –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ", "31")
        return False
    
    print_colored("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–∞–Ω–Ω–µ—Ä–∞...", "36")
    try:
        subprocess.run([str(venv_python), "run_interactive.py"], check=True)
        return True
    except subprocess.CalledProcessError as e:
        print_colored(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤: {e}", "31")
        return False
    except KeyboardInterrupt:
        print_colored("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...", "33")
        return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print_colored("="*50, "34")
    print_colored("ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê –ü–†–û–ï–ö–¢–ê", "34")
    print_colored("="*50, "34")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python
    if not check_python():
        return
    
    # –°–æ–∑–¥–∞–µ–º venv
    if not create_venv():
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not install_requirements():
        return
    
    print_colored("\nüéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!", "32")
    print_colored("="*50, "34")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    run_tests()

if __name__ == "__main__":
    main()