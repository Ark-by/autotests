#!/usr/bin/env python3
"""
üéØ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –≤—ã–±–æ—Ä–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –±—Ä–∞—É–∑–µ—Ä–∞
"""

import os
import subprocess
import sys
from datetime import datetime

def clear_screen():
    """–û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞"""
    os.system('cls' if os.name == 'nt' else 'clear')

def print_menu(current_browser):
    """–í—ã–≤–æ–¥ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤ —Å —Ç–µ–∫—É—â–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º"""
    print("="*50)
    print("ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í")
    print("="*50)
    print("\nüìã –í–´–ë–ï–†–ò–¢–ï –ö–ê–¢–ï–ì–û–†–ò–Æ –¢–ï–°–¢–û–í:\n")
    print("1. ‚úÖ –í–°–ï –¢–ï–°–¢–´")
    print("2. üß™ –í–´–ë–û–† –û–ü–†–ï–î–ï–õ–ï–ù–ù–û–ì–û –¢–ï–°–¢–ê")
    print(f"3. üåê –í–´–ë–û–† –ë–†–ê–£–ó–ï–†–ê (—Ç–µ–∫—É—â–∏–π: {current_browser.upper()})")
    print("0. ‚ùå –í–´–•–û–î")
    print("\n" + "="*50)

def get_user_choice():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        choice = input("\nüéØ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤—ã–±–æ—Ä–∞ (0-3): ").strip()
        return int(choice)
    except ValueError:
        return -1

def choose_browser():
    """–í—ã–±–æ—Ä –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    print("\nüåê –í–´–ë–ï–†–ò–¢–ï –ë–†–ê–£–ó–ï–† –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:\n")
    print("1. üöÄ Chrome (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
    print("2. ü¶ä Firefox")
    print("3. ‚Ü©Ô∏è  –ù–∞–∑–∞–¥")
    
    try:
        choice = input("\nüéØ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤—ã–±–æ—Ä–∞ (1-3): ").strip()
        browser_choice = int(choice)
        
        if browser_choice == 1:
            return "chrome"
        elif browser_choice == 2:
            return "firefox"
        elif browser_choice == 3:
            return None
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Chrome.")
            return "chrome"
    except ValueError:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥! –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Chrome.")
        return "chrome"

def run_tests(command, category_name, browser="chrome"):
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –æ—Ç—á–µ—Ç–∞ –∏ –≤—ã–±–æ—Ä–æ–º –±—Ä–∞—É–∑–µ—Ä–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É reports –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not os.path.exists('reports'):
        os.makedirs('reports')
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å timestamp
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    report_file = f"reports/{category_name}_{browser}_{timestamp}.html"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –∏ –±—Ä–∞—É–∑–µ—Ä–∞
    full_command = command + [
        f'--browser={browser}',
        f'--html={report_file}',
        '--self-contained-html',
        '-v',
        '-s'
    ]
    
    print(f"\nüöÄ –ó–∞–ø—É—Å–∫: {category_name}")
    print(f"üåê –ë—Ä–∞—É–∑–µ—Ä: {browser.upper()}")
    print(f"üìä –û—Ç—á–µ—Ç –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {report_file}")
    print("‚è≥ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...\n")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    result = subprocess.run(full_command)
    
    return result.returncode, report_file

def run_all_tests(browser="chrome"):
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    return run_tests(['pytest', 'tests/'], "ALL_TESTS", browser)

def run_specific_test(browser="chrome"):
    """–ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    print("\nüìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã:")
    test_files = [f for f in os.listdir('tests') if f.startswith('test_') and f.endswith('.py')]
    for i, file in enumerate(test_files, 1):
        print(f"   {i}. {file}")
    
    try:
        choice = int(input("\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª (–Ω–æ–º–µ—Ä): "))
        if 1 <= choice <= len(test_files):
            selected_file = test_files[choice-1]
            print(f"\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–∑: {selected_file}")
            return run_tests(['pytest', f'tests/{selected_file}'], f"SPECIFIC_{selected_file[:-3]}", browser)
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
            return None
    except ValueError:
        print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    current_browser = "chrome"  # –ë—Ä–∞—É–∑–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    while True:
        clear_screen()
        print_menu(current_browser)
        choice = get_user_choice()
        
        if choice == 0:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        elif choice == 1:
            returncode, report = run_all_tests(current_browser)
        elif choice == 2:
            result = run_specific_test(current_browser)
            if result:
                returncode, report = result
            else:
                input("\n‚èé –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                continue
        elif choice == 3:
            new_browser = choose_browser()
            if new_browser:
                current_browser = new_browser
                print(f"\n‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {current_browser.upper()}")
            input("\n‚èé –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            continue
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            input("\n‚èé –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            continue
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if returncode == 0:
            print(f"\n‚úÖ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        else:
            print(f"\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
        
        print(f"üìä –û—Ç—á–µ—Ç: {report}")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—å –æ—Ç—á–µ—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ
        if input("\nüñ•Ô∏è  –û—Ç–∫—Ä—ã—Ç—å –æ—Ç—á–µ—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ? (y/n): ").lower() == 'y':
            import webbrowser
            webbrowser.open(f'file://{os.path.abspath(report)}')
        
        input("\n‚èé –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

if __name__ == "__main__":
    main()